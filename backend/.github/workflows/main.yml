name: Kittygram Main Workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    - name: Test with flake8 and pytest
      env:
        POSTGRES_USER: kittygram_user
        POSTGRES_PASSWORD: kittygram_password
        DB_NAME: kittygram_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
      
  build_backend_and_push_to_dockerhub:
     name: Push Docker Image to Dockerhub
     runs-on: ubuntu-latest
     needs: tests
     steps:
       - name: Check out repo
         uses: actions/checkout@v3
       - name: Set up Buildx
         uses: docker/setup-buildx-action@v2
       - name: Login To Docker
         uses: docker/login-action@v2
         with:
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PASSWORD }}
       - name: Push to Dockerhub
         uses: docker/build-push-action@v4
         with:
           context: ./backend/
           push: true
           tags: waynje/kittygram_backend:latest
  
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      run: |
        cd frontend/
        npm ci
      
    - name: Test frontend
      run: |
        cd frontend/
        npm run test
  
  build_frontend_and_push_to_dockerhub:
    name: Push image to Dockerhub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v4
        with: 
          context: ./frontend/
          push: true
          tags: waynje/kittygram_frontend:latest
  
  build_nginx_and_push_to_dockerhub:
    name: Push image to Dockerhub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: waynje/kittygram_gateway:latest
  deploy: 
    runs-on: ubuntu-latest
    needs: 
      - build_backend_and_push_to_dockerhub
      - build_frontend_and_push_to_dockerhub
      - build_nginx_and_push_to_dockerhub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose via ssh
      uses: appleboy/scp-action@master
      with: 
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd kittygram
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d 
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static_backend/. /backend_static/static/
  
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with: 
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой Kittygram выполнен.